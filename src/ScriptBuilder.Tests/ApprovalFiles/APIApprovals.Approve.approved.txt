[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"AcceptanceTestHelper, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"ScriptBuilder.Tests, PublicKey=00240000048000009400000006020000002400005253413100040000010001007f16e21368ff041183fab592d9e8ed37e7be355e93323147a1d29983d6e591b04282e4da0c9e18bd901e112c0033925eb7d7872c2f1706655891c5c9d57297994f707d16ee9a8f40d978f064ee1ffc73c0db3f4712691b23bf596f75130f4ec978cf78757ec034625a5f27e6bb50c618931ea49f6f628fd74271c32959efb1c5")]
namespace NServiceBus.Persistence.Sql
{
    public class ErrorsException : System.Exception
    {
        public ErrorsException(string message) { }
        public string FileName { get; set; }
    }
}
namespace NServiceBus.Persistence.Sql.ScriptBuilder
{
    public enum BuildSqlDialect
    {
        MsSqlServer = 0,
        MySql = 1,
        Oracle = 2,
        PostgreSql = 3,
    }
    public class CorrelationProperty
    {
        public CorrelationProperty(string name, NServiceBus.Persistence.Sql.ScriptBuilder.CorrelationPropertyType type) { }
        public string Name { get; }
        public NServiceBus.Persistence.Sql.ScriptBuilder.CorrelationPropertyType Type { get; }
    }
    public enum CorrelationPropertyType
    {
        String = 0,
        DateTime = 1,
        DateTimeOffset = 2,
        Int = 3,
        Guid = 4,
    }
    public static class MsSqlServerCorrelationPropertyTypeConverter
    {
        public static string GetColumnType(NServiceBus.Persistence.Sql.ScriptBuilder.CorrelationPropertyType propertyType) { }
    }
    public static class MySqlCorrelationPropertyTypeConverter
    {
        public static string GetColumnType(NServiceBus.Persistence.Sql.ScriptBuilder.CorrelationPropertyType propertyType) { }
    }
    public static class OracleCorrelationPropertyTypeConverter
    {
        public static string GetColumnType(NServiceBus.Persistence.Sql.ScriptBuilder.CorrelationPropertyType propertyType) { }
    }
    public static class OutboxScriptBuilder
    {
        public static string BuildCreateScript(NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect) { }
        public static void BuildCreateScript(System.IO.TextWriter writer, NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect) { }
        public static string BuildDropScript(NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect) { }
        public static void BuildDropScript(System.IO.TextWriter writer, NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect) { }
    }
    public static class PostgreSqlCorrelationPropertyTypeConverter
    {
        public static string GetColumnType(NServiceBus.Persistence.Sql.ScriptBuilder.CorrelationPropertyType propertyType) { }
    }
    public class SagaDefinition
    {
        public SagaDefinition(string tableSuffix, string name, NServiceBus.Persistence.Sql.ScriptBuilder.CorrelationProperty correlationProperty = null, NServiceBus.Persistence.Sql.ScriptBuilder.CorrelationProperty transitionalCorrelationProperty = null) { }
        public NServiceBus.Persistence.Sql.ScriptBuilder.CorrelationProperty CorrelationProperty { get; }
        public string Name { get; }
        public string TableSuffix { get; }
        public NServiceBus.Persistence.Sql.ScriptBuilder.CorrelationProperty TransitionalCorrelationProperty { get; }
    }
    public static class SagaScriptBuilder
    {
        public static string BuildCreateScript(NServiceBus.Persistence.Sql.ScriptBuilder.SagaDefinition saga, NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect) { }
        public static void BuildCreateScript(NServiceBus.Persistence.Sql.ScriptBuilder.SagaDefinition saga, NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect, System.IO.TextWriter writer) { }
        public static string BuildDropScript(NServiceBus.Persistence.Sql.ScriptBuilder.SagaDefinition saga, NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect) { }
        public static void BuildDropScript(NServiceBus.Persistence.Sql.ScriptBuilder.SagaDefinition saga, NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect, System.IO.TextWriter writer) { }
    }
    public static class SubscriptionScriptBuilder
    {
        public static string BuildCreateScript(NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect) { }
        public static void BuildCreateScript(System.IO.TextWriter writer, NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect) { }
        public static string BuildDropScript(NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect) { }
        public static void BuildDropScript(System.IO.TextWriter writer, NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect) { }
    }
    public static class TimeoutScriptBuilder
    {
        public static string BuildCreateScript(NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect) { }
        public static void BuildCreateScript(System.IO.TextWriter writer, NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect) { }
        public static string BuildDropScript(NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect) { }
        public static void BuildDropScript(System.IO.TextWriter writer, NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect sqlDialect) { }
    }
}
public class ScriptGenerator
{
    public ScriptGenerator(string assemblyPath, string destinationDirectory, bool clean = true, bool overwrite = true, System.Collections.Generic.IReadOnlyList<NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect> dialectOptions = null, System.Func<string, string> promotionFinder = null, System.Action<string, string> logError = null) { }
    public void Generate() { }
    public static void Generate(string assemblyPath, string targetDirectory, System.Action<string, string> logError, System.Func<string, string> promotionPathFinder) { }
}
public abstract class ScriptWriter
{
    protected ScriptWriter(bool clean, bool overwrite, string scriptPath) { }
    protected bool Clean { get; }
    protected bool Overwrite { get; }
    protected string ScriptPath { get; }
    protected void WriteScript(string fileName, System.Action<System.IO.StreamWriter> action) { }
    public abstract void WriteScripts(NServiceBus.Persistence.Sql.ScriptBuilder.BuildSqlDialect dialect);
}
