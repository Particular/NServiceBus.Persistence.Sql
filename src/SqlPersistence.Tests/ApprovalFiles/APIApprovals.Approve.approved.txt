[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"AcceptanceTestHelper, PublicKey=0024000004800000940000000602000000240000525341310004000001000100B915C96048D09107F927B2BB769F052E3B35127227CBDB037BE5257342CF4A34ED0C4CC1C7B147D72AB71461C919EA096D21A50D857CFCB2472CD98A5FD1F493D98AE283A95BBD9BF0B838E8F039E51CF50320EB512B7AFDAFEE56262BE5888E673B043D64A9F362C10F0C624D4ACDA0FBFD21BCCE52750DB9E50189F6434DBB")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"MsSqlMicrosoftDataClientAcceptanceTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100B915C96048D09107F927B2BB769F052E3B35127227CBDB037BE5257342CF4A34ED0C4CC1C7B147D72AB71461C919EA096D21A50D857CFCB2472CD98A5FD1F493D98AE283A95BBD9BF0B838E8F039E51CF50320EB512B7AFDAFEE56262BE5888E673B043D64A9F362C10F0C624D4ACDA0FBFD21BCCE52750DB9E50189F6434DBB")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"MsSqlMicrosoftDataClientSqlTransportAcceptanceTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100B915C96048D09107F927B2BB769F052E3B35127227CBDB037BE5257342CF4A34ED0C4CC1C7B147D72AB71461C919EA096D21A50D857CFCB2472CD98A5FD1F493D98AE283A95BBD9BF0B838E8F039E51CF50320EB512B7AFDAFEE56262BE5888E673B043D64A9F362C10F0C624D4ACDA0FBFD21BCCE52750DB9E50189F6434DBB")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"MsSqlSystemDataClientAcceptanceTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100B915C96048D09107F927B2BB769F052E3B35127227CBDB037BE5257342CF4A34ED0C4CC1C7B147D72AB71461C919EA096D21A50D857CFCB2472CD98A5FD1F493D98AE283A95BBD9BF0B838E8F039E51CF50320EB512B7AFDAFEE56262BE5888E673B043D64A9F362C10F0C624D4ACDA0FBFD21BCCE52750DB9E50189F6434DBB")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"MsSqlSystemDataClientSqlTransportAcceptanceTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100B915C96048D09107F927B2BB769F052E3B35127227CBDB037BE5257342CF4A34ED0C4CC1C7B147D72AB71461C919EA096D21A50D857CFCB2472CD98A5FD1F493D98AE283A95BBD9BF0B838E8F039E51CF50320EB512B7AFDAFEE56262BE5888E673B043D64A9F362C10F0C624D4ACDA0FBFD21BCCE52750DB9E50189F6434DBB")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"MySqlAcceptanceTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100B915C96048D09107F927B2BB769F052E3B35127227CBDB037BE5257342CF4A34ED0C4CC1C7B147D72AB71461C919EA096D21A50D857CFCB2472CD98A5FD1F493D98AE283A95BBD9BF0B838E8F039E51CF50320EB512B7AFDAFEE56262BE5888E673B043D64A9F362C10F0C624D4ACDA0FBFD21BCCE52750DB9E50189F6434DBB")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"OracleAcceptanceTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100B915C96048D09107F927B2BB769F052E3B35127227CBDB037BE5257342CF4A34ED0C4CC1C7B147D72AB71461C919EA096D21A50D857CFCB2472CD98A5FD1F493D98AE283A95BBD9BF0B838E8F039E51CF50320EB512B7AFDAFEE56262BE5888E673B043D64A9F362C10F0C624D4ACDA0FBFD21BCCE52750DB9E50189F6434DBB")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"PostgreSqlAcceptanceTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100B915C96048D09107F927B2BB769F052E3B35127227CBDB037BE5257342CF4A34ED0C4CC1C7B147D72AB71461C919EA096D21A50D857CFCB2472CD98A5FD1F493D98AE283A95BBD9BF0B838E8F039E51CF50320EB512B7AFDAFEE56262BE5888E673B043D64A9F362C10F0C624D4ACDA0FBFD21BCCE52750DB9E50189F6434DBB")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"SqlPersistence.PersistenceTests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100B915C96048D09107F927B2BB769F052E3B35127227CBDB037BE5257342CF4A34ED0C4CC1C7B147D72AB71461C919EA096D21A50D857CFCB2472CD98A5FD1F493D98AE283A95BBD9BF0B838E8F039E51CF50320EB512B7AFDAFEE56262BE5888E673B043D64A9F362C10F0C624D4ACDA0FBFD21BCCE52750DB9E50189F6434DBB")]
[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"SqlPersistence.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100B915C96048D09107F927B2BB769F052E3B35127227CBDB037BE5257342CF4A34ED0C4CC1C7B147D72AB71461C919EA096D21A50D857CFCB2472CD98A5FD1F493D98AE283A95BBD9BF0B838E8F039E51CF50320EB512B7AFDAFEE56262BE5888E673B043D64A9F362C10F0C624D4ACDA0FBFD21BCCE52750DB9E50189F6434DBB")]
namespace NServiceBus.Persistence.Sql
{
    public interface IMessagePropertyMapper
    {
        void ConfigureMapping<TMessage>(System.Linq.Expressions.Expression<System.Func<TMessage, object>> messageProperty);
    }
    public interface ISqlStorageSession
    {
        System.Data.Common.DbConnection Connection { get; }
        System.Data.Common.DbTransaction Transaction { get; }
        [System.Obsolete("Use the overload that supports cancellation. Will be removed in version 8.0.0.", true)]
        void OnSaveChanges(System.Func<NServiceBus.Persistence.Sql.ISqlStorageSession, System.Threading.Tasks.Task> callback);
        void OnSaveChanges(System.Func<NServiceBus.Persistence.Sql.ISqlStorageSession, System.Threading.CancellationToken, System.Threading.Tasks.Task> callback);
    }
    public delegate Newtonsoft.Json.JsonSerializerSettings RetrieveVersionSpecificJsonSettings(System.Type sagaDataType, System.Version sagaVersion);
    public class SagaSettings
    {
        public void JsonSettings(Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings) { }
        public void JsonSettingsForVersion(NServiceBus.Persistence.Sql.RetrieveVersionSpecificJsonSettings builder) { }
        public void ReaderCreator(System.Func<System.IO.TextReader, Newtonsoft.Json.JsonReader> readerCreator) { }
        public void WriterCreator(System.Func<System.Text.StringBuilder, Newtonsoft.Json.JsonWriter> writerCreator) { }
    }
    public static class ScriptRunner
    {
        [System.Obsolete(@"Timeout manager is removed. Use `Install(SqlDialect sqlDialect, string tablePrefix, Func<DbConnection> connectionBuilder, string scriptDirectory, bool shouldInstallOutbox, bool shouldInstallSagas, bool shouldInstallSubscriptions)` instead. The member currently throws a NotImplementedException. Will be removed in version 8.0.0.", true)]
        public static System.Threading.Tasks.Task Install(NServiceBus.SqlDialect sqlDialect, string tablePrefix, System.Func<System.Data.Common.DbConnection> connectionBuilder, string scriptDirectory, bool shouldInstallOutbox = true, bool shouldInstallSagas = true, bool shouldInstallSubscriptions = true, bool shouldInstallTimeouts = true) { }
        public static System.Threading.Tasks.Task Install(NServiceBus.SqlDialect sqlDialect, string tablePrefix, System.Func<System.Data.Common.DbConnection> connectionBuilder, string scriptDirectory, bool shouldInstallOutbox = true, bool shouldInstallSagas = true, bool shouldInstallSubscriptions = true, System.Threading.CancellationToken cancellationToken = default) { }
        [System.Obsolete(@"Timeout manager is removed. Use `Install(SqlDialect sqlDialect, string tablePrefix, Func<Type, DbConnection> connectionBuilder, string scriptDirectory, bool shouldInstallOutbox, bool shouldInstallSagas, bool shouldInstallSubscriptions)` instead. The member currently throws a NotImplementedException. Will be removed in version 8.0.0.", true)]
        public static System.Threading.Tasks.Task Install(NServiceBus.SqlDialect sqlDialect, string tablePrefix, System.Func<System.Type, System.Data.Common.DbConnection> connectionBuilder, string scriptDirectory, bool shouldInstallOutbox = true, bool shouldInstallSagas = true, bool shouldInstallSubscriptions = true, bool shouldInstallTimeouts = true) { }
        public static System.Threading.Tasks.Task Install(NServiceBus.SqlDialect sqlDialect, string tablePrefix, System.Func<System.Type, System.Data.Common.DbConnection> connectionBuilder, string scriptDirectory, bool shouldInstallOutbox = true, bool shouldInstallSagas = true, bool shouldInstallSubscriptions = true, System.Threading.CancellationToken cancellationToken = default) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.All)]
    public sealed class SqlPersistenceSettingsAttribute : System.Attribute
    {
        public SqlPersistenceSettingsAttribute() { }
        public bool MsSqlServerScripts { get; set; }
        public bool MySqlScripts { get; set; }
        public bool OracleScripts { get; set; }
        public bool PostgreSqlScripts { get; set; }
        public bool ProduceOutboxScripts { get; set; }
        public bool ProduceSagaScripts { get; set; }
        public bool ProduceSubscriptionScripts { get; set; }
        public bool ProduceTimeoutScripts { get; set; }
        public string ScriptPromotionPath { get; set; }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.All, Inherited=false)]
    public sealed class SqlSagaAttribute : System.Attribute
    {
        public SqlSagaAttribute(string correlationProperty = null, string transitionalCorrelationProperty = null, string tableSuffix = null) { }
        public string CorrelationProperty { get; }
        public string TableSuffix { get; }
        public string TransitionalCorrelationProperty { get; }
    }
    public abstract class SqlSaga<TSagaData> : NServiceBus.Saga
        where TSagaData : NServiceBus.IContainSagaData, new ()
    {
        protected SqlSaga() { }
        protected abstract string CorrelationPropertyName { get; }
        public TSagaData Data { get; set; }
        protected virtual string TableSuffix { get; }
        protected virtual string TransitionalCorrelationPropertyName { get; }
        protected override void ConfigureHowToFindSaga(NServiceBus.IConfigureHowToFindSagaWithMessage mapper) { }
        protected abstract void ConfigureMapping(NServiceBus.Persistence.Sql.IMessagePropertyMapper mapper);
    }
    public static class SqlStorageSessionTupleExtensions
    {
        public static void Deconstruct(this NServiceBus.Persistence.Sql.ISqlStorageSession session, out System.Data.Common.DbConnection connection, out System.Data.Common.DbTransaction transaction) { }
    }
    public class SubscriptionSettings
    {
        public void CacheFor(System.TimeSpan timeSpan) { }
        public void ConnectionBuilder(System.Func<System.Data.Common.DbConnection> connectionBuilder) { }
        public void DisableCache() { }
    }
    [System.Obsolete("Timeout manager is removed. Timeout storage configuration can be removed. Will be" +
        " removed in version 8.0.0.", true)]
    public class TimeoutSettings
    {
        public TimeoutSettings() { }
        public void ConnectionBuilder(System.Func<System.Data.Common.DbConnection> connectionBuilder) { }
    }
}
namespace NServiceBus
{
    public abstract class SqlDialect
    {
        protected SqlDialect() { }
        public override string ToString() { }
        public class MsSqlServer : NServiceBus.SqlDialect
        {
            public MsSqlServer() { }
        }
        public class MySql : NServiceBus.SqlDialect
        {
            public MySql() { }
        }
        public class Oracle : NServiceBus.SqlDialect
        {
            public Oracle() { }
        }
        public class PostgreSql : NServiceBus.SqlDialect
        {
            public PostgreSql() { }
        }
    }
    public abstract class SqlDialectSettings
    {
        protected SqlDialectSettings(NServiceBus.SqlDialect dialect) { }
    }
    public class SqlDialectSettings<T> : NServiceBus.SqlDialectSettings
        where T : NServiceBus.SqlDialect, new ()
    {
        public SqlDialectSettings() { }
    }
    public class SqlPersistence : NServiceBus.Persistence.PersistenceDefinition
    {
        public SqlPersistence() { }
    }
    public static class SqlPersistenceConfig
    {
        public static void ConnectionBuilder(this NServiceBus.PersistenceExtensions<NServiceBus.SqlPersistence> configuration, System.Func<System.Data.Common.DbConnection> connectionBuilder) { }
        public static void DisableInstaller(this NServiceBus.PersistenceExtensions<NServiceBus.SqlPersistence> configuration) { }
        public static void DoNotUseSqlServerTransportConnection(this NServiceBus.SqlDialectSettings<NServiceBus.SqlDialect.MsSqlServer> dialectSettings) { }
        public static void JsonBParameterModifier(this NServiceBus.SqlDialectSettings<NServiceBus.SqlDialect.PostgreSql> dialectSettings, System.Action<System.Data.Common.DbParameter> modifier) { }
        public static void MultiTenantConnectionBuilder(this NServiceBus.PersistenceExtensions<NServiceBus.SqlPersistence> configuration, System.Func<NServiceBus.Transport.IncomingMessage, string> captureTenantId, System.Func<string, System.Data.Common.DbConnection> buildConnectionFromTenantData) { }
        public static void MultiTenantConnectionBuilder(this NServiceBus.PersistenceExtensions<NServiceBus.SqlPersistence> configuration, string tenantIdHeaderName, System.Func<string, System.Data.Common.DbConnection> buildConnectionFromTenantData) { }
        public static NServiceBus.Persistence.Sql.SagaSettings SagaSettings(this NServiceBus.PersistenceExtensions<NServiceBus.SqlPersistence> configuration) { }
        public static void Schema(this NServiceBus.SqlDialectSettings<NServiceBus.SqlDialect.MsSqlServer> dialectSettings, string schema) { }
        public static void Schema(this NServiceBus.SqlDialectSettings<NServiceBus.SqlDialect.Oracle> dialectSettings, string schema) { }
        public static void Schema(this NServiceBus.SqlDialectSettings<NServiceBus.SqlDialect.PostgreSql> dialectSettings, string schema) { }
        public static NServiceBus.SqlDialectSettings<T> SqlDialect<T>(this NServiceBus.PersistenceExtensions<NServiceBus.SqlPersistence> configuration)
            where T : NServiceBus.SqlDialect, new () { }
        public static NServiceBus.Persistence.Sql.SubscriptionSettings SubscriptionSettings(this NServiceBus.PersistenceExtensions<NServiceBus.SqlPersistence> configuration) { }
        public static void TablePrefix(this NServiceBus.PersistenceExtensions<NServiceBus.SqlPersistence> configuration, string tablePrefix) { }
        [System.Obsolete("Timeout manager is removed. Timeout storage configuration can be removed. The mem" +
            "ber currently throws a NotImplementedException. Will be removed in version 8.0.0" +
            ".", true)]
        public static NServiceBus.Persistence.Sql.TimeoutSettings TimeoutSettings(this NServiceBus.PersistenceExtensions<NServiceBus.SqlPersistence> configuration) { }
    }
    public static class SqlPersistenceOutboxSettingsExtensions
    {
        public static void DisableCleanup(this NServiceBus.Outbox.OutboxSettings configuration) { }
        public static void KeepDeduplicationDataFor(this NServiceBus.Outbox.OutboxSettings configuration, System.TimeSpan timeToKeepDeduplicationData) { }
        public static void RunDeduplicationDataCleanupEvery(this NServiceBus.Outbox.OutboxSettings configuration, System.TimeSpan frequencyToRunDeduplicationDataCleanup) { }
        public static void TransactionIsolationLevel(this NServiceBus.Outbox.OutboxSettings outboxSettings, System.Data.IsolationLevel isolationLevel) { }
        public static void UsePessimisticConcurrencyControl(this NServiceBus.Outbox.OutboxSettings outboxSettings) { }
        public static void UseTransactionScope(this NServiceBus.Outbox.OutboxSettings outboxSettings) { }
        public static void UseTransactionScope(this NServiceBus.Outbox.OutboxSettings outboxSettings, System.Transactions.IsolationLevel isolationLevel) { }
    }
    public static class SqlPersistenceStorageSessionExtensions
    {
        public static System.Threading.Tasks.Task<TSagaData> GetSagaData<TSagaData>(this NServiceBus.Persistence.ISynchronizedStorageSession session, NServiceBus.Extensibility.IReadOnlyContextBag context, string whereClause, ParameterAppender appendParameters, System.Threading.CancellationToken cancellationToken = default)
            where TSagaData :  class, NServiceBus.IContainSagaData { }
        public static NServiceBus.Persistence.Sql.ISqlStorageSession SqlPersistenceSession(this NServiceBus.Persistence.ISynchronizedStorageSession session) { }
    }
}
public delegate void ParameterAppender(System.Func<System.Data.Common.DbParameter> parameterBuilder, System.Action<System.Data.Common.DbParameter> append);