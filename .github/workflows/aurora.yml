name: Aurora tests
on:
  push:
    branches:
      - 'aws-aurora'
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
permissions:
  id-token: write # This is required for requesting the JWT
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        uses: actions/checkout@v3.5.3
        with:
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3.2.0
        with:
          dotnet-version: |
            6.0.x
            7.0.x

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AURORA_CI_ROLE }}
          role-session-name: AuroraCI
          aws-region: us-east-2

      - name: Build
        run: dotnet build src --configuration Release
      - name: Upload packages
        uses: actions/upload-artifact@v3.1.2
        with:
          name: NuGet packages
          path: nugets/
          retention-days: 7

      - name: Install CDK
        id: install-cdk
        run: npm install -g aws-cdk

      - name: Setup Aurora (PostgreSQL)
        id: aurora-postgresql
        shell: pwsh
        run: |
          cd src/AuroraSetup
          cdk deploy

          $secrets = aws secretsmanager get-secret-value --secret-id aurora_test_secrets --region us-east-2 --query SecretString --output text | ConvertFrom-Json
          $aurorahost = $secrets.host
          $user = $secrets.user
          $pw = $secrets.password
          $connectionString = "Host=$aurorahost;User ID=$user;Password=$pw;Port=5432;Database=postgres;"
          echo "AuroraPostgreSqlConnectionString=$connectionString" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Run tests
        uses: Particular/run-tests-action@v1.6.0
        
      - name: Teardown infrastructure
        if: ${{ always() }}
        shell: pwsh
        run: |
          cd src/AuroraSetup
          cdk destroy
