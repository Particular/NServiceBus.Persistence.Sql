name: CI
on:
  push:
    branches:
      - master
      - release-[6-9].*
  pull_request:
    branches-ignore:
      - release-[0-5].*
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  build:
    name: ${{ matrix.os-name }}-${{ matrix.engine }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-2019, ubuntu-20.04 ]
        engine: [ SqlServer, MySql, PostgreSql ]
        include:
          # Add os-name alias for job name
          - os: windows-2019
            os-name: Windows
          - os: ubuntu-20.04
            os-name: Linux
          # Additional permutatations for Oracle
          - os: ubuntu-20.04
            os-name: Linux
            engine: Oracle
          - os: [self-hosted, windows, oracle]
            os-name: Windows
            engine: Oracle
      fail-fast: false
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1.9.0
        with:
          dotnet-version: |
            5.0.x
            3.1.x
      - name: Build
        run: dotnet build src --configuration Release
      - name: Upload packages
        uses: actions/upload-artifact@v2.2.4
        with:
          name: NuGet packages
          path: nugets/
          retention-days: 7
      - name: Azure login
        uses: azure/login@v1.3.0
        if: matrix.engine == 'PostgreSQL'
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Setup SQL Server
        if: matrix.engine == 'SqlServer'
        uses: Particular/install-sql-server-action@v1.0.0
        with:
          connection-string-env-var: SQLServerConnectionString
          catalog: nservicebus
      - name: Setup PostgreSql
        id: setup-postgresql
        if: matrix.engine == 'PostgreSql'
        shell: pwsh
        run: |
          echo "Getting the Azure region in which this workflow is running..."
          $hostInfo = curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2021-02-01" | ConvertFrom-Json
          $region = $hostInfo.compute.location
          echo "Actions agent running in Azure region: $region"

          $name = "postgres-$(Get-Random)"
          $packageTag = "Package=SqlPersistence"
          $runnerOsTag = "RunnerOS=$($Env:RUNNER_OS)"
          $dateTag = "Created=$(Get-Date -Format "yyyy-MM-dd")"

          $password = [guid]::NewGuid().ToString("n")
          echo "::add-mask::$password"

          echo "Creating PostgreSQL container $name (This can take a while)"
          $details = az container create --image postgres:14 --name $name --location $region --dns-name-label $name --resource-group GitHubActions-RG --cpu 2 --memory 8 --ports 5432 --ip-address public --environment-variables POSTGRES_PASSWORD="$password" | ConvertFrom-Json
          echo "::set-output name=name::$name"

          echo "Tagging container"
          $ignore = az tag create --resource-id $details.id --tags $packageTag $runnerOsTag $dateTag

          $fqdn = $details.ipAddress.fqdn
          echo "::add-mask::$fqdn"

          $connectionString = "User ID=postgres;Password=$password;Host=$fqdn;Port=5432;Database=postgres;"
          echo "PostgreSqlConnectionString=$connectionString" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

          $env:PGPASSWORD = $password

          # psql not in PATH on Windows
          if ($Env:RUNNER_OS -eq 'Windows') {
            $Env:PATH = $Env:PATH + ';' + $Env:PGBIN
          }

          for ($i = 0; $i -lt 24; $i++) { ## 2 minute timeout
            echo "Checking for PostgreSQL connectivity $($i+1)/30..."
            $ignore = psql --host $fqdn --username=postgres --list
            if ($?) {
              echo "Connection successful"
              break;
            }
            sleep 5
          }

      - name: Setup MySQL
        id: setup-mysql
        if: matrix.engine == 'MySql'
        shell: pwsh
        run: |
          echo '[client]
          user=root
          host=localhost' >> mysql-login

          if ($Env:RUNNER_OS -eq 'Windows') {
            echo "Installing MySQL from Chocolatey"
            choco install mysql --limitoutput
            echo 'password=' >> mysql-login
          } else {
            echo "Starting MySQL service preinstalled on Linux agent"
            sudo systemctl start mysql.service
            echo 'password=root' >> mysql-login
          }

          for ($i = 0; $i -lt 30; $i++) { ## 2.5 minute timeout
            echo "Checking for MySQL connectivity $($i+1)/30..."
            $ignore = mysql --defaults-extra-file=mysql-login -e "show databases;"
            if ($?) {
              echo "Connection successful"
              break;
            }
            sleep 5
          }

          echo "Creating nservicebus database"
          mysql --defaults-extra-file=mysql-login -D mysql -e "create database if not exists nservicebus ;"
          echo "Creating user particular"
          mysql --defaults-extra-file=mysql-login -D mysql -e "create user particular identified by 'Welcome1' ;"
          echo "Giving user particular access to schema nservicebus"
          mysql --defaults-extra-file=mysql-login -D mysql -e "grant all on *.* to particular@'%' ;"

          $connectionString = "Data Source=localhost;Initial Catalog=nservicebus;User ID=particular;Password=Welcome1;AllowUserVariables=True;AutoEnlist=false;Connect Timeout=60"
          echo "MySQLConnectionString=$connectionString" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Setup Oracle
        id: setup-oracle
        if: matrix.engine == 'Oracle'
        shell: pwsh
        run: |
          if ( $Env:RUNNER_OS -eq 'Windows') {
            echo "Adding environment variables for Oracle connection strings"
            echo "OracleConnectionString=User Id=particular;Password=Welcome1;Data Source=127.0.0.1:1521/nservicebus;Enlist=dynamic" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
            echo "OracleConnectionString_Particular2=User Id=particular2;Password=Welcome1;Data Source=127.0.0.1:1521/nservicebus;Enlist=dynamic" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          }

          if ( $Env:RUNNER_OS -eq 'Linux' ) {
            echo "Running Oracle using Docker"
            docker run --name oracle -d -p 1521:1521 -e ORACLE_PASSWORD=Welcome1 gvenzl/oracle-xe:21

            for ($i = 0; $i -lt 24; $i++) { ## 2 minute timeout
              echo "Checking for Oracle connectivity $($i+1)/24..."
              docker exec oracle ./healthcheck.sh
              if ($?) {
                echo "Connection successful"
                break;
              }
              sleep 5
            }

            cat ./.github/workflows/scripts/oracle-setup-linux.sql | docker exec -i oracle sqlplus / as sysdba

            echo "Adding environment variables for Oracle connection strings"
            echo "OracleConnectionString=Data Source=(DESCRIPTION=(ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521)))(CONNECT_DATA = (SERVER = DEDICATED)(SERVICE_NAME = XE)));User Id=particular; Password=Welcome1; Enlist=dynamic" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
            echo "OracleConnectionString_Particular2=Data Source=(DESCRIPTION=(ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = 127.0.0.1)(PORT = 1521)))(CONNECT_DATA = (SERVER = DEDICATED)(SERVICE_NAME = XE)));User Id=particular2; Password=Welcome1; Enlist=dynamic" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          }

      - name: Run tests
        uses: Particular/run-tests-action@v1.0.0
      - name: Teardown infrastructure
        if: ${{ always() }}
        shell: pwsh
        run: |
          if ('${{ matrix.engine }}' -eq 'PostgreSql') {
            echo "Removing container ${{ steps.setup-postgresql.outputs.name }}"
            $ignore = az container delete --resource-group GitHubActions-RG --name ${{ steps.setup-postgresql.outputs.name }} --yes
            echo "Removal complete"
          }
