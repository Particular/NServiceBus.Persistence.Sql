name: CI
on:
  push:
    branches:
      - master
      - release-[6-9].*
  pull_request:
    branches-ignore: release-[0-5].*
  pull_request_target:
    branches-ignore: release-[0-5].*
  workflow_dispatch:
env:
  DOTNET_NOLOGO: true
jobs:
  build:
    name: CI-${{ matrix.os }}-${{ matrix.engine }}
    if:
      (github.event_name == 'pull_request_target' && github.event.pull_request.user.login == 'dependabot[bot]') ||
      (github.event_name == 'pull_request' && github.event.pull_request.user.login != 'dependabot[bot]') ||
      github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix. os }}
    strategy:
      matrix:
        os: [ windows-2019, ubuntu-20.04 ]
        engine:
          - MsSql
          - Oracle
          - MySql
          - PostgreSql
      fail-fast: false
    steps:
      - name: Check for secrets
        env:
          SECRETS_AVAILABLE: ${{ secrets.SECRETS_AVAILABLE }}
        shell: pwsh
        run: exit $(If ($env:SECRETS_AVAILABLE -eq 'true') { 0 } Else { 1 })
      - name: Checkout
        if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - name: Checkout for Dependabot
        if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v2.3.4
        with:
          ref: "refs/pull/${{ github.event.number }}/merge"
          fetch-depth: 0
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v1.9.0
        with:
          dotnet-version: |
            5.0.x
            3.1.x
      - name: Build
        run: dotnet build src --configuration Release
      - name: Upload packages
        uses: actions/upload-artifact@v2.2.4
        with:
          name: NuGet packages
          path: nugets/
          retention-days: 7
      - name: Azure login
        uses: azure/login@v1.3.0
        with:
          creds: ${{ secrets.AZURE_ACI_CREDENTIALS }}
      - name: Setup SQL Server
        if: matrix.engine == 'MsSql'
        uses: Particular/install-sql-server-action@v1.0.0
        with:
          connection-string-env-var: SQLServerConnectionString
          catalog: nservicebus
      - name: Setup PostgreSql
        id: setup-postgresql
        if: matrix.engine == 'PostgreSql'
        shell: pwsh
        run: |
          echo "Getting the Azure region in which this workflow is running..."
          $hostInfo = curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2021-02-01" | ConvertFrom-Json
          $region = $hostInfo.compute.location
          echo "Actions agent running in Azure region $region"

          $name = "postgres-$(Get-Random)"
          $packageTag = "Package=SqlPersistence"
          $runnerOsTag = "RunnerOS=$($Env:RUNNER_OS)"
          $dateTag = "Created=$(Get-Date -Format "yyyy-MM-dd")"

          $password = [guid]::NewGuid().ToString("n")
          echo "::add-mask::$password"

          echo "Creating PostgreSQL container $name (This can take a while)"
          $details = az container create --image postgres:14 --name $name --location $region --dns-name-label $name --resource-group GitHubActions-RG --cpu 2 --memory 8 --ports 8080 --ip-address public --environment-variables POSTGRES_PASSWORD="$password" | ConvertFrom-Json
          echo "::set-output name=name::$name"

          echo "Tagging container"
          $ignore = az tag create --resource-id $details.id --tags $packageTag $runnerOsTag $dateTag

          $fqdn = $details.ipAddress.fqdn
          echo "::add-mask::$fqdn"

          $connectionString = "User ID=postgres;Password=$password;Host=$fqdn;Port=8080;Database=postgres;"
          echo "PostgreSqlConnectionString=$connectionString" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Setup MySQL
        id: setup-mysql
        if: matrix.engine == 'MySql'
        shell: pwsh
        run: |
          echo "Getting the Azure region in which this workflow is running..."
          $hostInfo = curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2021-02-01" | ConvertFrom-Json
          $region = $hostInfo.compute.location
          echo "Actions agent running in Azure region $region"

          $name = "mysql-$(Get-Random)"
          $packageTag = "Package=SqlPersistence"
          $runnerOsTag = "RunnerOS=$($Env:RUNNER_OS)"
          $dateTag = "Created=$(Get-Date -Format "yyyy-MM-dd")"

          $password = [guid]::NewGuid().ToString("n")
          echo "::add-mask::$password"

          echo "Creating MySQL container $name (This can take a while)"
          $details = az container create --image mysql:8 --name $name --location $region --dns-name-label $name --resource-group GitHubActions-RG --cpu 2 --memory 8 --ports 3306 --ip-address public --environment-variables MYSQL_ROOT_PASSWORD="$password" MYSQL_USER=particular MYSQL_PASSWORD="$password" MYSQL_DATABASE=nservicebus | ConvertFrom-Json
          echo "::set-output name=name::$name"

          echo "Tagging container"
          $ignore = az tag create --resource-id $details.id --tags $packageTag $runnerOsTag $dateTag

          $fqdn = $details.ipAddress.fqdn
          echo "::add-mask::$fqdn"

          $connectionString = "server=$fqdn;user=particular;database=nservicebus;port=3306;password=$password;AllowUserVariables=True;AutoEnlist=false;Connect Timeout=120;SslMode=none"
          echo "MySQLConnectionString=$connectionString" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Run tests
        uses: Particular/run-tests-action@project-filter
      - name: Teardown infrastructure
        if: ${{ always() }}
        shell: pwsh
        run: |
          if ('${{ matrix.engine }}' -eq 'PostgreSql') {
            $ignore = az container delete --resource-group GitHubActions-RG --name ${{ steps.setup-postgresql.outputs.name }} --yes
          }

          if ('${{ matrix.engine }}' -eq 'MySql') {
            $ignore = az container delete --resource-group GitHubActions-RG --name ${{ steps.setup-mysql.outputs.name }} --yes
          }